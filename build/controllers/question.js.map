{"version":3,"sources":["../../api/controllers/question.js"],"names":["Question","createQuestion","req","res","body","title","status","send","message","question","questionModel","data","user","createdBy","meetup","upvote","fetchOneQuestion","params","id","questionVote","votes","downvote"],"mappings":";;;;;;AAAA;;;;;;AAEA;AACA,IAAMA,WAAW;AACfC,gBADe,0BACAC,GADA,EACKC,GADL,EACU;AACvB,QAAI,CAACD,IAAIE,IAAJ,CAASC,KAAV,IAAmB,CAACH,IAAIE,IAAJ,CAASA,IAAjC,EAAuC;AACrC,aAAOD,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,iBAAS;AADiB,OAArB,CAAP;AAGD;AACD,QAAMC,WAAWC,mBAAcT,cAAd,CAA6BC,IAAIE,IAAjC,CAAjB;AACA,WAAOD,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,cAAQ,GADkB;AAE1BK,YAAM,CAAC;AACLC,cAAMH,SAASI,SADV;AAELC,gBAAQL,SAASK,MAFZ;AAGLT,eAAOI,SAASJ,KAHX;AAILD,cAAMK,SAASL;;AAJV,OAAD;AAFoB,KAArB,CAAP;AAUD,GAlBc;;;AAoBf;AACAW,QArBe,kBAqBRb,GArBQ,EAqBHC,GArBG,EAqBE;AACf,QAAMM,WAAWC,mBAAcM,gBAAd,CAA+Bd,IAAIe,MAAJ,CAAWC,EAA1C,CAAjB;AACA,QAAI,CAACT,QAAL,EAAe;AACb,aAAON,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,iBAAS;AADiB,OAArB,CAAP;AAGD;AACD,QAAMW,eAAeT,mBAAcK,MAAd,CAAqBb,IAAIe,MAAJ,CAAWC,EAAhC,CAArB;AACA,WAAOf,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,cAAQ,GADkB;AAE1BK,YAAM,CAAC;AACLG,gBAAQK,aAAaL,MADhB;AAELT,eAAOc,aAAad,KAFf;AAGLD,cAAMe,aAAaf,IAHd;AAILgB,eAAOD,aAAaC;;AAJf,OAAD;AAFoB,KAArB,CAAP;AAUD,GAvCc;;;AAyCf;AACAC,UA1Ce,oBA0CNnB,GA1CM,EA0CDC,GA1CC,EA0CI;AACjB,QAAMM,WAAWC,mBAAcM,gBAAd,CAA+Bd,IAAIe,MAAJ,CAAWC,EAA1C,CAAjB;AACA,QAAI,CAACT,QAAL,EAAe;AACb,aAAON,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,iBAAS;AADiB,OAArB,CAAP;AAGD;AACD,QAAMW,eAAeT,mBAAcW,QAAd,CAAuBnB,IAAIe,MAAJ,CAAWC,EAAlC,CAArB;AACA,WAAOf,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,cAAQ,GADkB;AAE1BK,YAAM,CAAC;AACLG,gBAAQK,aAAaL,MADhB;AAELT,eAAOc,aAAad,KAFf;AAGLD,cAAMe,aAAaf,IAHd;AAILgB,eAAOD,aAAaC;;AAJf,OAAD;AAFoB,KAArB,CAAP;AAUD;AA5Dc,CAAjB;;kBA+DepB,Q","file":"question.js","sourcesContent":["import questionModel from '../models/question';\r\n\r\n// Controller for create a question\r\nconst Question = {\r\n  createQuestion(req, res) {\r\n    if (!req.body.title || !req.body.body) {\r\n      return res.status(400).send({\r\n        message: 'The fields title and body are required',\r\n      });\r\n    }\r\n    const question = questionModel.createQuestion(req.body);\r\n    return res.status(201).send({\r\n      status: 201,\r\n      data: [{\r\n        user: question.createdBy,\r\n        meetup: question.meetup,\r\n        title: question.title,\r\n        body: question.body,\r\n\r\n      }],\r\n    });\r\n  },\r\n\r\n  // Controller for upvote a question\r\n  upvote(req, res) {\r\n    const question = questionModel.fetchOneQuestion(req.params.id);\r\n    if (!question) {\r\n      return res.status(404).send({\r\n        message: 'Question not found',\r\n      });\r\n    }\r\n    const questionVote = questionModel.upvote(req.params.id);\r\n    return res.status(200).send({\r\n      status: 200,\r\n      data: [{\r\n        meetup: questionVote.meetup,\r\n        title: questionVote.title,\r\n        body: questionVote.body,\r\n        votes: questionVote.votes,\r\n\r\n      }],\r\n    });\r\n  },\r\n\r\n  // Controller for downvote a question\r\n  downvote(req, res) {\r\n    const question = questionModel.fetchOneQuestion(req.params.id);\r\n    if (!question) {\r\n      return res.status(404).send({\r\n        message: 'Question not found',\r\n      });\r\n    }\r\n    const questionVote = questionModel.downvote(req.params.id);\r\n    return res.status(200).send({\r\n      status: 200,\r\n      data: [{\r\n        meetup: questionVote.meetup,\r\n        title: questionVote.title,\r\n        body: questionVote.body,\r\n        votes: questionVote.votes,\r\n\r\n      }],\r\n    });\r\n  },\r\n};\r\n\r\nexport default Question;\r\n"]}