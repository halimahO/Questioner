{"version":3,"sources":["../../api/models/question.js"],"names":["Question","questions","data","newId","array","length","id","newQuestion","Number","createdOn","format","createdBy","meetup","title","String","body","votes","push","find","question","fetchOneQuestion","index","indexOf"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEMA,Q;AACJ,sBAAc;AAAA;;AACZ,SAAKC,SAAL,GAAiB,EAAjB;AACD;;AAED;;;;;mCACeC,I,EAAM;AACnB,UAAMC,QAAQ,SAARA,KAAQ,CAACC,KAAD,EAAW;AACvB,YAAIA,MAAMC,MAAN,GAAe,CAAnB,EAAsB;AACpB,iBAAOD,MAAMA,MAAMC,MAAN,GAAe,CAArB,EAAwBC,EAAxB,GAA6B,CAApC;AACD;AACD,eAAO,CAAP;AACD,OALD;AAMA,UAAMC,cAAc;AAClBD,YAAIE,OAAOL,MAAM,KAAKF,SAAX,CAAP,CADc;AAElBQ,mBAAW,wBAASC,MAAT,CAAgB,MAAhB,CAFO;AAGlBC,mBAAW,QAHO;AAIlBC,gBAAQ,UAJU;AAKlBC,eAAOC,OAAOZ,KAAKW,KAAZ,CALW;AAMlBE,cAAMD,OAAOZ,KAAKa,IAAZ,CANY;AAOlBC,eAAOR,OAAO,CAAP;AAPW,OAApB;AASA,WAAKP,SAAL,CAAegB,IAAf,CAAoBV,WAApB;AACA,aAAOA,WAAP;AACD;;;qCAEgBD,E,EAAI;AACnB;AACA,aAAO,KAAKL,SAAL,CAAeiB,IAAf,CAAoB;AAAA,eAAQhB,KAAKI,EAAL,IAAWA,EAAnB;AAAA,OAApB,CAAP;AACD;;AAED;;;;2BACOA,E,EAAI;AACT,UAAMa,WAAW,KAAKC,gBAAL,CAAsBd,EAAtB,CAAjB;AACA,UAAMe,QAAQ,KAAKpB,SAAL,CAAeqB,OAAf,CAAuBH,QAAvB,CAAd;AACA,WAAKlB,SAAL,CAAeoB,KAAf,EAAsBL,KAAtB,IAA+B,CAA/B;AACA,aAAO,KAAKf,SAAL,CAAeoB,KAAf,CAAP;AACD;;AAED;;;;6BACSf,E,EAAI;AACX,UAAMa,WAAW,KAAKC,gBAAL,CAAsBd,EAAtB,CAAjB;AACA,UAAMe,QAAQ,KAAKpB,SAAL,CAAeqB,OAAf,CAAuBH,QAAvB,CAAd;AACA,WAAKlB,SAAL,CAAeoB,KAAf,EAAsBL,KAAtB,IAA+B,CAA/B;AACA,aAAO,KAAKf,SAAL,CAAeoB,KAAf,CAAP;AACD;;;;;;kBAGY,IAAIrB,QAAJ,E","file":"question.js","sourcesContent":["import moment from 'moment';\r\n\r\nclass Question {\r\n  constructor() {\r\n    this.questions = [];\r\n  }\r\n\r\n  // Model for create a question\r\n  createQuestion(data) {\r\n    const newId = (array) => {\r\n      if (array.length > 0) {\r\n        return array[array.length - 1].id + 1;\r\n      }\r\n      return 1;\r\n    };\r\n    const newQuestion = {\r\n      id: Number(newId(this.questions)),\r\n      createdOn: moment().format('LLLL'),\r\n      createdBy: 'userId',\r\n      meetup: 'meetupId',\r\n      title: String(data.title),\r\n      body: String(data.body),\r\n      votes: Number(0),\r\n    };\r\n    this.questions.push(newQuestion);\r\n    return newQuestion;\r\n  }\r\n\r\n  fetchOneQuestion(id) {\r\n    // eslint-disable-next-line eqeqeq\r\n    return this.questions.find(data => data.id == id);\r\n  }\r\n\r\n  // Model for upvote a question\r\n  upvote(id) {\r\n    const question = this.fetchOneQuestion(id);\r\n    const index = this.questions.indexOf(question);\r\n    this.questions[index].votes += 1;\r\n    return this.questions[index];\r\n  }\r\n\r\n  // Model for downvote a question\r\n  downvote(id) {\r\n    const question = this.fetchOneQuestion(id);\r\n    const index = this.questions.indexOf(question);\r\n    this.questions[index].votes -= 1;\r\n    return this.questions[index];\r\n  }\r\n}\r\n\r\nexport default new Question();\r\n"]}